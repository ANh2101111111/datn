package datn.example.datn.service;

import datn.example.datn.dto.request.CartItemRequestDTO;
import datn.example.datn.dto.request.CartRequestDTO;
import datn.example.datn.dto.response.CartResponseDTO;
import datn.example.datn.entity.Cart;
import datn.example.datn.entity.CartItem;
import datn.example.datn.entity.Product;
import datn.example.datn.entity.User;
import datn.example.datn.mapper.CartMapper;
import datn.example.datn.repository.CartItemRepository;
import datn.example.datn.repository.CartRepository;
import datn.example.datn.repository.ProductRepository;
import datn.example.datn.repository.UserRepository;
import jakarta.transaction.Transactional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@Service
@Transactional
public class CartService {
    @Autowired
    private CartRepository cartRepository;
    @Autowired
    private CartItemRepository cartItemRepository;
    @Autowired
    private ProductRepository productRepository;
    @Autowired
    private UserRepository userRepository;
    @Autowired
    private CartMapper cartMapper;

    /**
     * L·∫•y gi·ªè h√†ng c·ªßa user
     */
    public CartResponseDTO getCart(Long userId) {
        Cart cart = cartRepository.findByUser_UserId(userId)
                .orElseGet(() -> createNewCart(userId));
        return cartMapper.toCartResponseDTO(cart);
    }

    public CartResponseDTO addToCart(CartRequestDTO cartRequestDTO) {
        Long userId = cartRequestDTO.getUserId();

        // üî• T√¨m User t·ª´ database tr∆∞·ªõc khi set v√†o Cart
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new RuntimeException("User kh√¥ng t·ªìn t·∫°i"));

        // Ki·ªÉm tra gi·ªè h√†ng c·ªßa user
        Cart cart = cartRepository.findByUser(user).orElseGet(() -> {
            Cart newCart = new Cart();
            newCart.setUser(user); // ‚úÖ G√°n tr·ª±c ti·∫øp User, kh√¥ng ph·∫£i ID
            newCart.setItems(new ArrayList<>()); // üî• Tr√°nh l·ªói NullPointerException
            return cartRepository.save(newCart);
        });

        // Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
        for (CartItemRequestDTO itemDTO : cartRequestDTO.getItems()) {
            Product product = productRepository.findById(itemDTO.getProductId())
                    .orElseThrow(() -> new RuntimeException("S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i"));

            CartItem cartItem = new CartItem();
            cartItem.setProduct(product);
            cartItem.setQuantity(itemDTO.getQuantity());
//            if (product.getOriginalPrice() == null) {
//                throw new RuntimeException("S·∫£n ph·∫©m kh√¥ng c√≥ gi√°.");
//            }
            cartItem.setUnitPrice(product.getOriginalPrice());
            cartItem.setCart(cart);
            cart.getItems().add(cartItem);
        }

        // ‚úÖ L∆∞u cart sau khi th√™m s·∫£n ph·∫©m
        cartRepository.save(cart);

        return cartMapper.toCartResponseDTO(cart);
    }


    /**
     * C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng
     */
    public CartResponseDTO updateCart(Long userId, CartRequestDTO cartRequestDTO) {
        // üî• T√¨m User tr∆∞·ªõc khi set v√†o Cart
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new RuntimeException("User kh√¥ng t·ªìn t·∫°i"));

        // üî• T√¨m gi·ªè h√†ng c·ªßa User
        Cart cart = cartRepository.findByUser(user)
                .orElseThrow(() -> new RuntimeException("Gi·ªè h√†ng kh√¥ng t·ªìn t·∫°i"));

        // üî• Duy·ªát qua danh s√°ch s·∫£n ph·∫©m trong DTO ƒë·ªÉ c·∫≠p nh·∫≠t
        for (CartItemRequestDTO itemDTO : cartRequestDTO.getItems()) {
            Product product = productRepository.findById(itemDTO.getProductId())
                    .orElseThrow(() -> new RuntimeException("S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i"));

            CartItem cartItem = cartItemRepository.findByCartAndProduct(cart, product)
                    .orElseGet(() -> {
                        CartItem newItem = new CartItem();
                        newItem.setCart(cart);
                        newItem.setProduct(product);
                        return newItem;
                    });

            cartItem.setQuantity(itemDTO.getQuantity());
            cartItemRepository.save(cartItem);
        }

        return cartMapper.toCartResponseDTO(cart);
    }


    /**
     * X√≥a m·ªôt s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
     */
    public CartResponseDTO removeItemFromCart(Long userId, Long productId) {
        Cart cart = cartRepository.findByUser_UserId(userId)
                .orElseThrow(() -> new RuntimeException("Gi·ªè h√†ng kh√¥ng t·ªìn t·∫°i"));

        CartItem cartItem = cart.getItems().stream()
                .filter(item -> item.getProduct().getBicycleId().equals(productId))
                .findFirst()
                .orElseThrow(() -> new RuntimeException("S·∫£n ph·∫©m kh√¥ng c√≥ trong gi·ªè h√†ng"));

        cart.getItems().remove(cartItem);
        cartItemRepository.delete(cartItem);

        return cartMapper.toCartResponseDTO(cart);
    }

    /**
     * X√≥a to√†n b·ªô gi·ªè h√†ng
     */
    public void clearCart(Long userId) {
        Cart cart = cartRepository.findByUser_UserId(userId)
                .orElseThrow(() -> new RuntimeException("Gi·ªè h√†ng kh√¥ng t·ªìn t·∫°i"));

        cartItemRepository.deleteAll(cart.getItems());
        cart.getItems().clear();
        cartRepository.save(cart);
    }

    /**
     * T·∫°o gi·ªè h√†ng m·ªõi cho user n·∫øu ch∆∞a c√≥
     */
    private Cart createNewCart(Long userId) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new RuntimeException("User kh√¥ng t·ªìn t·∫°i"));
        Cart cart = new Cart();
        cart.setUser(user);
        cart.setItems(new ArrayList<>());
        return cartRepository.save(cart);
    }
}
